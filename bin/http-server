#!/usr/bin/env node

'use strict';

var chalk     = require('chalk'),
    os         = require('os'),
    httpServer = require('../lib/http-server'),
    portfinder = require('portfinder'),
    opener     = require('opener'),

    fs         = require('fs'),
    url        = require('url');
var argv = require('minimist')(process.argv.slice(2), {
  alias: {
    tls: 'ssl'
  }
});

var ifaces = os.networkInterfaces();

process.title = 'http-server';

if (argv.h || argv.help) {
  console.log([
    'usage: http-server [path] [options]',
    '用法: http-server [地址] [参数]',
    '',
    'options 参数:',
    '  -p --port    Port to use. If 0, look for open port.',
    '               使用的端口，如果为0，则自动寻找开放的端口 [8080]',
    '  -a           Address to use.',
    '               使用的地址 [0.0.0.0]',
    '  -d           Show directory listings.',
    '               显示目录列表 [true]',
    '  -i           Display autoIndex.',
    '               显示自动索引 [true]',
    '  -detail      Show detailed system information.',
    '               显示详细系统信息 [false]',
    '  -m --min     Minimize web pages. (without icons and fonts)',
    '               最小化网页 (不自带图标与字体) [false]',
    '  -g --gzip    Serve gzip files when possible.',
    '               在可行时提供GZIP文件 [false]',
    '  -b --brotli  Serve brotli files when possible.',
    '               在可行时提供Brotli文件 [false]',
    '               If both brotli and gzip are enabled, brotli takes precedence.',
    '               如果同时启用了Brotli和GZIP，优先使用Brotli',
    '  -e --ext     Default file extension if none supplied.',
    '               默认文件扩展名（如果未提供）[none]',
    '  -s --silent  Suppress log messages from output',
    '               禁止输出日志消息',
    '  --ss         Suppress port messages alone',
    '               单独输出端口消息',
    '  --cors[=headers]   Enable CORS via the "Access-Control-Allow-Origin" header',
    '                     通过"Access-Control-Allow-Origin"的标头允许CORS跨域',
    '                     Optionally provide CORS headers list separated by commas',
    '                     （可选）提供由逗号分隔的CORS标头列表',
    '  -o [path]    Open browser window after starting the server.',
    '               启动服务器后打开浏览器窗口',
    '               Optionally provide a URL path to open the browser window to.',
    '               （可选）提供打开浏览器窗口的URL路径',
    '  -c           Cache time (max-age) in seconds [3600], e.g. -c10 for 10 seconds.',
    '               缓存时间（最长期限）（单位：秒）[3600], 例：-c10 for 10 seconds.',
    '               To disable caching, use -c-1.',
    '               禁用缓存，使用 -c-1.',
    '  -t           Connections timeout in seconds [120], e.g. -t60 for 1 minute.',
    '               连接超时（单位：秒）[120], 例：-t60 for 1 minute.',
    '               To disable timeout, use -t0',
    '               禁用连接超时，使用 -t0',
    '  -U --utc     Use UTC time format in log messages.',
    '               在日志消息中使用UTC时间格式',
    '  --log-ip     Enable logging of the client\'s IP address',
    '               启用客户端IP地址的日志记录',
    '',
    '  -P --proxy       Fallback proxy if the request cannot be resolved. e.g.: http://someurl.com',
    '                   无法解析请求时的回退代理。例：http://someurl.com',
    '  --proxy-options  Pass options to proxy using nested dotted objects. e.g.: --proxy-options.secure false',
    '                   使用嵌套的虚线对象将选项传递给代理。例：--proxy-options.secure false',
    '',
    '  --username   Username for basic authentication.',
    '               基本身份验证的用户名 [none]',
    '               Can also be specified with the env variable NODE_HTTP_SERVER_USERNAME',
    '               也可以使用环境变量NODE_HTTP_SERVER_USERNAME指定',
    '  --password   Password for basic authentication',
    '               基本身份验证密码 [none]',
    '               Can also be specified with the env variable NODE_HTTP_SERVER_PASSWORD',
    '               也可以使用环境变量NODE_HTTP_SERVER_PASSWORD指定',
    '',
    '  -S --tls --ssl   Enable secure request serving with TLS/SSL (HTTPS)',
    '                   启用使用TLS/SSL（HTTPS）服务的安全请求',
    '  -C --cert    Path to TLS cert file (default: cert.pem)',
    '               TLS证书文件的路径（默认：cert.pem）',
    '  -K --key     Path to TLS key file (default: key.pem)',
    '               TLS密钥文件的路径（默认：key.pem）',
    '',
    '  -r --robots        Respond to /robots.txt [User-agent: *\\nDisallow: /]',
    '                     对 /robots.txt 的响应 [User-agent: *\\nDisallow: /]',
    '  --no-dotfiles      Do not show dotfiles',
    '                     不显示点文件',
    '  --mimetypes        Path to a .types file for custom mimetype definition',
    '                     自定义mimetype定义的类型文件的路径',
    '  -h --help          Print this list and exit.',
    '                     打印这个列表然并退出',
    '  -v --version       Print the version and exit.',
    '                     打印版本并退出',
  ].join('\n'));
  process.exit();
}

var port = argv.p || argv.port || parseInt(process.env.PORT, 10),
    host = argv.a || '0.0.0.0',
    tls = argv.S || argv.tls,
    sslPassphrase = process.env.NODE_HTTP_SERVER_SSL_PASSPHRASE,
    proxy = argv.P || argv.proxy,
    proxyOptions = argv['proxy-options'],
    utc = argv.U || argv.utc,
    version = argv.v || argv.version,
    logger;

var proxyOptionsBooleanProps = [
  'ws', 'xfwd', 'secure', 'toProxy', 'prependPath', 'ignorePath', 'changeOrigin',
  'preserveHeaderKeyCase', 'followRedirects', 'selfHandleResponse'
];

if (proxyOptions) {
  Object.keys(proxyOptions).forEach(function (key) {
    if (proxyOptionsBooleanProps.indexOf(key) > -1) {
      proxyOptions[key] = proxyOptions[key].toLowerCase() === 'true';
    }
  });
}

if (!argv.s && !argv.silent) {
  logger = {
    info: console.log,
    request: function (req, res, error) {
      var date = utc ? new Date().toUTCString() : new Date();
      var ip = argv['log-ip']
          ? req.headers['x-forwarded-for'] || '' +  req.connection.remoteAddress
          : '';
      if (error) {
        logger.info(
          '[%s] %s "%s %s" Error (%s): "%s"',
          date, ip, chalk.red(req.method), chalk.red(req.url),
          chalk.red(error.status.toString()), chalk.red(error.message)
        );
      }
      else {
        logger.info(
          '[%s] %s "%s %s" "%s"',
          date, ip, chalk.cyan(req.method), chalk.cyan(req.url),
          req.headers['user-agent']
        );
      }
    }
  };
}
else if (chalk) {
  logger = {
    info: function () {},
    request: function () {}
  };
}

if (version) {
  logger.info('v' + require('../package.json').version);
  process.exit();
}

if (!port) {
  portfinder.basePort = 8080;
  portfinder.getPort(function (err, port) {
    if (err) { throw err; }
    listen(port);
  });
}
else {
  listen(port);
}

function listen(port) {
  var options = {
    root: argv._[0],
    cache: argv.c,
    timeout: argv.t,
    showDir: argv.d,
    autoIndex: argv.i,
    gzip: argv.g || argv.gzip,
    brotli: argv.b || argv.brotli,
    robots: argv.r || argv.robots,
    ext: argv.e || argv.ext,
    logFn: logger.request,
    proxy: proxy,
    proxyOptions: proxyOptions,
    showDotfiles: argv.dotfiles,
    mimetypes: argv.mimetypes,
    username: argv.username || process.env.NODE_HTTP_SERVER_USERNAME,
    password: argv.password || process.env.NODE_HTTP_SERVER_PASSWORD
  };

  if (argv.cors) {
    options.cors = true;
    if (typeof argv.cors === 'string') {
      options.corsHeaders = argv.cors;
    }
  }

  if (proxy) {
    try {
      new url.URL(proxy)
    }
    catch (err) {
      logger.info(chalk.red('Error: Invalid proxy url'));
      process.exit(1);
    }
  }

  if (tls) {
    options.https = {
      cert: argv.C || argv.cert || 'cert.pem',
      key: argv.K || argv.key || 'key.pem',
      passphrase: sslPassphrase,
    };
    try {
      fs.lstatSync(options.https.cert);
    }
    catch (err) {
      logger.info(chalk.red('Error: Could not find certificate ' + options.https.cert));
      process.exit(1);
    }
    try {
      fs.lstatSync(options.https.key);
    }
    catch (err) {
      logger.info(chalk.red('Error: Could not find private key ' + options.https.key));
      process.exit(1);
    }
  }

  var server = httpServer.createServer(options);
  server.listen(port, host, function () {
    var protocol = tls ? 'https://' : 'http://';
	
    logger.info([
      chalk.yellow('Starting up server, serving '),
      chalk.cyan(server.root),
      tls ? (chalk.yellow(' through') + chalk.cyan(' https')) : ''
    ].join(''));
	
    logger.info([
      chalk.yellow('正在开启服务器，serving目录 '),
      chalk.cyan(server.root),
      tls ? (chalk.yellow(' through') + chalk.cyan(' https')) : ''
    ].join(''));

    //logger.info([chalk.yellow('\nhttp-server version: '), chalk.cyan(require('../package.json').version)].join(''));
	
	
    logger.info([
      chalk.yellow('\nhttp-server settings  服务器设置: '),
      ([chalk.yellow('CORS  跨域: '), argv.cors ? chalk.cyan(argv.cors) : chalk.red('disabled')].join('')),
      ([chalk.yellow('Cache  高速缓存: '), argv.c ? (argv.c === '-1' ? chalk.red('disabled') : chalk.cyan(argv.c + ' seconds')) : chalk.cyan('3600 seconds')].join('')),
      ([chalk.yellow('Connection Timeout  连接超时: '), argv.t === '0' ? chalk.red('disabled') : (argv.t ? chalk.cyan(argv.t + ' seconds') : chalk.cyan('120 seconds'))].join('')),
      ([chalk.yellow('Directory Listings  目录列表: '), argv.d ? chalk.red('not visible') : chalk.cyan('visible')].join('')),
      ([chalk.yellow('AutoIndex  自动索引: '), argv.i ? chalk.red('not visible') : chalk.cyan('visible')].join('')),
      ([chalk.yellow('Serve GZIP Files  提供GZIP文件: '), argv.g || argv.gzip ? chalk.cyan('true') : chalk.red('false')].join('')),
      ([chalk.yellow('Serve Brotli Files  提供Brotli文件: '), argv.b || argv.brotli ? chalk.cyan('true') : chalk.red('false')].join('')),
      ([chalk.yellow('Default File Extension  默认文件扩展名: '), argv.e ? chalk.cyan(argv.e) : (argv.ext ? chalk.cyan(argv.ext) : chalk.red('none'))].join(''))
    ].join('\n'));
	
	
    logger.info(chalk.yellow('\nDownload Server Available on  下载服务器在以下地址可用:'));
	
	
    if (argv.a && host !== '0.0.0.0') {
      logger.info(`  ${protocol}${host}:${chalk.green(port.toString())}`);
    } else {
      Object.keys(ifaces).forEach(function (dev) {
        ifaces[dev].forEach(function (details) {
          if (details.family === 'IPv4') {
            logger.info(('  ' + protocol + details.address + ':' + chalk.green(port.toString())));
          }
        });
      });
    }
	
	if (argv.ss) console.log(port);

    if (typeof proxy === 'string') {
      if (proxyOptions) {
        logger.info('Unhandled requests will be served from: ' + proxy + '. Options: ' + JSON.stringify(proxyOptions));
      }
      else {
        logger.info('Unhandled requests will be served from: ' + proxy);
      }
    }

    logger.info('Hit Ctrl-C to stop the server  按下 Ctrl-C 关闭服务器');
    if (argv.o) {
      const openHost = host === '0.0.0.0' ? '127.0.0.1' : host;
      let openUrl = `${protocol}${openHost}:${port}`;
      if (typeof argv.o === 'string') {
        openUrl += argv.o[0] === '/' ? argv.o : '/' + argv.o;
      }
      logger.info('Open: ' + openUrl);
      opener(openUrl);
    }

    // Spacing before logs
    if (!argv.s) logger.info();
  });
}

if (process.platform === 'win32') {
  require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  }).on('SIGINT', function () {
    process.emit('SIGINT');
  });
}

process.on('SIGINT', function () {
  logger.info(chalk.red('http-server stopped.'));
  process.exit();
});

process.on('SIGTERM', function () {
  logger.info(chalk.red('http-server stopped.'));
  process.exit();
});
